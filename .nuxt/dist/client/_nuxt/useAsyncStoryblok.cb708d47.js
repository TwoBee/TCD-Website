import{G as M,j as y,H as O,I as C,p as A,u as B,J as S,K as z,L as H,M as I,N as j}from"./entry.b72159b9.js";const E=()=>null;function K(...s){var m,v,D,_,b,g,w,P,x;const u=typeof s[s.length-1]=="string"?s.pop():void 0;typeof s[0]!="string"&&s.unshift(u);let[t,i,e={}]=s;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof i!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=(m=e.server)!=null?m:!0,e.default=(v=e.default)!=null?v:E,e.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),e.lazy=(_=(D=e.lazy)!=null?D:e.defer)!=null?_:!1,e.initialCache=(b=e.initialCache)!=null?b:!0,e.immediate=(g=e.immediate)!=null?g:!0;const a=M(),f=()=>(a.isHydrating||e.initialCache)&&a.payload.data[t]!==void 0;a._asyncData[t]||(a._asyncData[t]={data:y(f()?a.payload.data[t]:(P=(w=e.default)==null?void 0:w.call(e))!=null?P:null),pending:y(!f()),error:y((x=a.payload._errors[t])!=null?x:null)});const r={...a._asyncData[t]};r.refresh=r.execute=(o={})=>{if(a._asyncDataPromises[t]){if(o.dedupe===!1)return a._asyncDataPromises[t];a._asyncDataPromises[t].cancelled=!0}if(o._initial&&f())return a.payload.data[t];r.pending.value=!0;const c=new Promise((n,l)=>{try{n(i(a))}catch(d){l(d)}}).then(n=>{if(c.cancelled)return a._asyncDataPromises[t];e.transform&&(n=e.transform(n)),e.pick&&(n=R(n,e.pick)),r.data.value=n,r.error.value=null}).catch(n=>{var l,d;if(c.cancelled)return a._asyncDataPromises[t];r.error.value=n,r.data.value=B((d=(l=e.default)==null?void 0:l.call(e))!=null?d:null)}).finally(()=>{c.cancelled||(r.pending.value=!1,a.payload.data[t]=r.data.value,r.error.value&&(a.payload._errors[t]=!0),delete a._asyncDataPromises[t])});return a._asyncDataPromises[t]=c,a._asyncDataPromises[t]};const p=()=>r.refresh({_initial:!0}),k=e.server!==!1&&a.payload.serverRendered;{const o=S();if(o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const n=o._nuxtOnBeforeMountCbs;o&&(O(()=>{n.forEach(l=>{l()}),n.splice(0,n.length)}),C(()=>n.splice(0,n.length)))}k&&a.isHydrating&&t in a.payload.data?r.pending.value=!1:o&&(a.payload.serverRendered&&a.isHydrating||e.lazy)&&e.immediate?o._nuxtOnBeforeMountCbs.push(p):e.immediate&&p(),e.watch&&A(e.watch,()=>r.refresh());const c=a.hook("app:data:refresh",n=>{if(!n||n.includes(t))return r.refresh()});o&&C(c)}const h=Promise.resolve(a._asyncDataPromises[t]).then(()=>r);return Object.assign(h,r),h}function R(s,u){const t={};for(const i of u)t[i]=s[i];return t}const N=async(s,u={},t={})=>{const i=z(s,()=>null),e=H();I(()=>{i.value&&i.value.id&&j(i.value.id,f=>i.value=f,t)});const{data:a}=await K(s,async()=>await e.get(`cdn/stories/${s}`,u),"$1y33TvDSpK");return i.value=a.value.data.story,i};export{N as u};
